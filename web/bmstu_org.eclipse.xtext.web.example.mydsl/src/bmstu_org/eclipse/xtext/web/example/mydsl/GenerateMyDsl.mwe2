module bmstu_org.eclipse.xtext.web.example.mydsl.GenerateMyDsl

import org.eclipse.xtext.xtext.generator.*
import org.eclipse.xtext.xtext.generator.model.project.*

var rootPath = ".."

Workflow {
	
	component = XtextGenerator {
		configuration = MyDslGeneratorModule{
			project = StandardProjectConfig {
				baseName = "bmstu_org.eclipse.xtext.web.example.mydsl"
				rootPath = rootPath
				genericIde = {
					enabled = true
				}
				//createEclipseMetaData = true
				
				web = {
					enabled = true
					root = "../COPYorg.eclipse.xtext.web.example.jetty"
					src = "../COPYorg.eclipse.xtext.web.example.jetty/dsl_src/main/java"
					srcGen = "../COPYorg.eclipse.xtext.web.example.jetty/dsl_src/main/xtext-gen"
					assets = "../COPYorg.eclipse.xtext.web.example.jetty/src/main/webapp"
				}
				
			}
			code = {
				encoding = "UTF-8"
				fileHeader = "/*\n * generated by Xtext \${version}\n */"
			}
		}
		language =  {
			name = "_COPYorg.xtext.web.example.mydsl.MyDsl"
			grammarUri = "classpath:/bmstu_org/eclipse/xtext/web/example/mydsl/MyDsl.xtext"
			
			fileExtensions = "mydsl"

//			serializer = {
//				generateStub = false
//			}
//			validator = {
//				// composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
//			}

		// Java API to access grammar elements (required by several other fragments)
			fragment = grammarAccess.GrammarAccessFragment2 {}

			// generates Java API for the generated EPackages
			fragment = ecore.EMFGeneratorFragment2 {}

			fragment = serializer.SerializerFragment2 {
				generateStub = false
			}

			// a custom ResourceFactory for use with EMF
			fragment = resourceFactory.ResourceFactoryFragment2 {}

			// The antlr parser generator fragment.
			fragment = parser.antlr.XtextAntlrGeneratorFragment2 {
			}

			// Xtend-based API for validation
			fragment = validation.ValidatorFragment2 {
			    composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
			}

			// scoping and exporting API
			fragment = scoping.ImportNamespacesScopingFragment2 {}
			fragment = exporting.QualifiedNamesFragment2 {}

			// generator API
			fragment = generator.GeneratorFragment2 {}

			// formatter API
			fragment = formatting.Formatter2Fragment2 {}
			
			// JavaScript-based syntax highlighting
			fragment = web.WebIntegrationFragment {
				framework = "Orion"
				highlightingPath = "xtext/mydsl-syntax.js"
			}
			fragment = web.WebIntegrationFragment {
				framework = "Ace"
				highlightingPath = "xtext/ace-mode-mydsl.js"
			}
			fragment = web.WebIntegrationFragment {
				framework = "CodeMirror"
				highlightingPath = "xtext/cm-mode-mydsl.js"
			}

		}
	}
}

